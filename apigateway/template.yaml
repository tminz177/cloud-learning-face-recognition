AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  ApiName:
    Type: String
  ExtractFaceInImagesArn:
    Type: String
  SearchFaceByImagesArn:
    Type: String
  ImportToDBArn:
    Type: String
  
Resources:
  APIGatewayREST:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref ApiName

  ExtractFaceInImagesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref APIGatewayREST
      ParentId: !GetAtt APIGatewayREST.RootResourceId
      PathPart: extractFace
    DependsOn: APIGatewayREST

  ExtractFaceInImagesMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref APIGatewayREST
      ResourceId: !Ref ExtractFaceInImagesResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: '200'
      Integration:
        Type: AWS
        IntegrationResponses:
          - StatusCode: '200'
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations
          - LambdaFuncNameArn: !Ref ExtractFaceInImagesArn
    DependsOn:
      - ExtractFaceInImagesResource
  
  ExtractFaceInImagesDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref APIGatewayREST
      StageName: api
    DependsOn:
      - ExtractFaceInImagesMethod
  
  ExtractFaceInImagesPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ExtractFaceInImagesArn
      Principal: apigateway.amazonaws.com
    DependsOn:
      - ExtractFaceInImagesDeployment

  ImportToDBResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref APIGatewayREST
      ParentId: !GetAtt APIGatewayREST.RootResourceId
      PathPart: importToDB
    DependsOn: APIGatewayREST

  ImportToDBMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref APIGatewayREST
      ResourceId: !Ref ImportToDBResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: '200'
      Integration:
        Type: AWS
        IntegrationResponses:
          - StatusCode: '200'
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations
          - LambdaFuncNameArn: !Ref ImportToDBArn
    DependsOn:
      - ImportToDBResource
  
  ImportToDBDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref APIGatewayREST
      StageName: api
    DependsOn:
      - ImportToDBMethod

  ImportToDBPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ImportToDBArn
      Principal: apigateway.amazonaws.com
    DependsOn:
      - ImportToDBDeployment
      
  SearchFaceByImagesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref APIGatewayREST
      ParentId: !GetAtt APIGatewayREST.RootResourceId
      PathPart: searchFace
    DependsOn: APIGatewayREST 

  SearchFaceByImagesMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref APIGatewayREST
      ResourceId: !Ref SearchFaceByImagesResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: '200'
      Integration:
        Type: AWS
        IntegrationResponses:
          - StatusCode: '200'
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations
          - LambdaFuncNameArn: !Ref SearchFaceByImagesArn
    DependsOn:
      - SearchFaceByImagesResource

  SearchFaceByImagesDeployment:
      Type: AWS::ApiGateway::Deployment
      Properties:
        RestApiId: !Ref APIGatewayREST
        StageName: api
      DependsOn:
        - SearchFaceByImagesMethod

  SearchFaceByImagesPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !Ref SearchFaceByImagesArn
        Principal: apigateway.amazonaws.com
      DependsOn:
        - SearchFaceByImagesDeployment

  #Use template below to create path for another lambda
  # <API>Resource:
  #   Type: AWS::ApiGateway::Resource
  #   Properties:
  #     RestApiId: !Ref APIGatewayREST
  #     ParentId: !GetAtt 
  #       - APIGatewayREST
  #       - RootResourceId
  #     PathPart: <Lambda>
  #   DependsOn: APIGatewayREST

  # <API>Method:
  #   Type: AWS::ApiGateway::Method
  #   Properties:
  #     RestApiId: !Ref APIGatewayREST
  #     ResourceId: !Ref <API>Resource
  #     HttpMethod: POST
  #     AuthorizationType: NONE
  #     MethodResponses:
  #       - StatusCode: '200'
  #     Integration:
  #       Type: AWS
  #       IntegrationResponses:
  #         - StatusCode: '200'
  #       IntegrationHttpMethod: POST
  #       Uri: !Sub 
  #         - >-
  #           arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations
  #         - LambdaFuncNameArn: !Ref <Lambda>Arn
  #   DependsOn:
  #     - <API>Resource
  
  # <API>Deployment:
  #   Type: AWS::ApiGateway::Deployment
  #   Properties:
  #     RestApiId: !Ref APIGatewayREST
  #   DependsOn:
  #     - <API>Method
  
  # <API>Permission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     Action: lambda:InvokeFunction
  #     FunctionName: !Ref <Lambda>Arn
  #     Principal: apigateway.amazonaws.com
  #   DependsOn:
  #     - <API>Deployment